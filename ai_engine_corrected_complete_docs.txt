# MindCare AI Engine - Complete & Verified Documentation

## Overview
The MindCare AI Engine is a sophisticated artificial intelligence system designed for mental health analysis and therapeutic support. It provides AI-powered insights, predictive analytics, and personalized recommendations by integrating with the data warehouse to access comprehensive user data.

## Architecture & Components

### 1. Core Structure
```
AI_engine/
├── models.py           # Data models for AI analysis storage (8 models)
├── views.py            # REST API endpoints for AI services
├── serializers.py      # Data serialization for API responses
├── urls.py            # URL routing for AI endpoints
├── signals.py         # Real-time analysis triggers
├── apps.py            # Django app configuration
├── services/          # AI business logic and analysis services (10 services)
├── management/        # Django management commands (2 commands)
└── migrations/        # Database migrations
```

### 2. AI Engine Models (Complete List)

#### Core Analysis Models:
1. **UserAnalysis** - Primary user analysis results storage
2. **AIInsight** - AI-generated insights and recommendations
3. **TherapyRecommendation** - Therapeutic recommendations and tracking

#### Specialized Analysis Models:
4. **SocialInteractionAnalysis** - Social interaction pattern analysis
5. **CommunicationPatternAnalysis** - Communication pattern storage
6. **ConversationSummary** - Therapy conversation summaries
7. **MedicationEffectAnalysis** - Medication effectiveness tracking
8. **CrisisEvent** - Crisis detection and monitoring events

### 3. Services Layer (AI_engine/services/) - Verified

#### Core AI Services:
1. **ai_analysis.py** - Main AI analysis orchestrator using Ollama/Mistral LLM
   - `analyze_user_data()` - Comprehensive user data analysis
   - `analyze_session()` - Real-time session analysis
   - `generate_text()` - LLM text generation
   - Quality control and graceful degradation

2. **data_interface.py** - Clean interface to datawarehouse
   - `get_ai_ready_dataset()` - Unified data access
   - `get_communication_metrics()` - Communication analysis data
   - Quality validation and caching support
   - Error handling and logging

3. **user_resume_service.py** - Comprehensive user analytics for therapists
   - Multi-card analytics system
   - Social engagement and communication patterns
   - Therapeutic progress tracking

4. **predictive_service.py** - Predictive analytics and forecasting
   - Risk assessment algorithms
   - Trend prediction and forecasting

#### Specialized Analysis Services:
5. **social_analysis.py** - Social interaction pattern analysis
   - Relationship dynamics tracking
   - Social engagement metrics

6. **therapy_analysis.py** - Therapy session effectiveness analysis
   - Progress tracking and recommendations
   - Session quality assessment

7. **medication_analysis.py** - Medication adherence and effects tracking
   - Side effect analysis and correlations
   - Adherence pattern recognition

8. **conversation_summary.py** - Therapeutic conversation summarization
   - Key insight extraction
   - Session summary generation

9. **crisis_monitoring.py** - Crisis detection and intervention
   - Emergency situation identification
   - Risk level assessment

10. **tips_service.py** - Personalized recommendations and tips
    - Mood-based recommendations
    - Activity suggestions
    - Combined tip generation

### 4. Real-time Processing System

#### Signal-Based Analysis Triggers:
- **trigger_mood_analysis()** - Auto-triggers when new mood logs created
- **trigger_journal_analysis()** - Auto-triggers when new journal entries created
- Quality threshold validation (minimum 0.2 overall quality)
- Comprehensive error handling and logging

#### Quality Control System:
- Data quality metrics validation
- Multi-source data verification
- Graceful degradation with default analysis
- Comprehensive logging for monitoring

### 5. Management Commands

#### Available Commands:
1. **analyze_existing_users.py** - Bulk analysis for existing users
2. **initialize_ai.py** - AI system initialization and setup

## Data Integration with Datawarehouse

### 1. AI Data Interface Service
The AI Engine accesses datawarehouse through a clean interface layer:

```
AI_engine/services/data_interface.py → datawarehouse/services/unified_data_collection_service.py
```

**Key Integration Features:**
- **No Direct Model Access**: AI Engine never directly imports mood.models, journal.models, etc.
- **Unified Data Access**: Single point of access to all datawarehouse data
- **Quality Validation**: Built-in data quality checks before analysis
- **Caching Support**: Utilizes datawarehouse caching for performance
- **Error Resilience**: Comprehensive error handling and logging

### 2. Data Flow: Datawarehouse → AI Engine

```
1. Data Collection (Datawarehouse)
   ├── Specialized Services collect raw data
   ├── Unified Data Collection Service aggregates
   ├── AI-ready datasets generated with quality metrics
   └── Cached in AIAnalysisDataset model

2. AI Analysis Request (Manual or Signal-Triggered)
   ├── AI Engine requests data via Data Interface Service
   ├── Data Interface calls Datawarehouse Unified Service
   ├── Quality validation and data preparation
   └── AI-ready dataset returned to AI services

3. AI Processing
   ├── Multiple AI services process different aspects
   ├── Ollama/Mistral LLM analysis for complex insights
   ├── Statistical analysis and pattern detection
   └── Results stored in AI Engine models

4. Real-time Updates (Signal-Based)
   ├── New mood log → trigger_mood_analysis signal
   ├── New journal entry → trigger_journal_analysis signal
   ├── Quality threshold check (>0.2)
   └── Automatic analysis generation if quality sufficient
```

### 3. What AI Engine Uses from Datawarehouse

#### Mood Analytics:
- **Average mood scores and trends**
- **Mood volatility and consistency metrics**
- **Daily mood patterns and correlations**
- **Activity impact on mood**
- **Sleep quality correlation**

#### Journal Analytics:
- **Sentiment analysis of entries**
- **Topic modeling and keyword extraction**
- **Writing pattern analysis**
- **Therapeutic progress indicators**
- **Coping strategies mentioned**

#### Communication Analytics:
- **Message frequency and timing patterns**
- **Response time analysis**
- **Sentiment analysis of messages**
- **Crisis language detection**
- **Therapeutic relationship metrics**

#### Therapy Session Analytics:
- **Session frequency and duration**
- **Progress tracking metrics**
- **Goal achievement rates**
- **Engagement level analysis**

#### Social Interaction Analytics:
- **Social engagement patterns**
- **Support network analysis**
- **Communication effectiveness**
- **Isolation risk indicators**

#### Medication Analytics:
- **Adherence patterns**
- **Side effect correlations**
- **Effectiveness metrics**
- **Timing pattern analysis**

## API Endpoints (Complete)

### 1. Core Analysis Endpoints
- `GET/POST /ai-engine/analysis/` - User analysis CRUD operations
- `POST /ai-engine/insights/analyze-user/` - Trigger user analysis

### 2. Insights Management
- `GET /ai-engine/insights/` - List user insights
- `GET /ai-engine/insights/{id}/` - Retrieve specific insight
- `POST /ai-engine/insights/{id}/mark-addressed/` - Mark insight as addressed
- `GET /ai-engine/insights/chatbot-context/` - Get insights for chatbot

### 3. Therapy Recommendations
- `GET /ai-engine/recommendations/` - List recommendations
- `GET /ai-engine/recommendations/{id}/` - Retrieve recommendation
- `POST /ai-engine/recommendations/{id}/mark-implemented/` - Mark as implemented
- `POST /ai-engine/recommendations/{id}/rate/` - Rate effectiveness

### 4. Communication Analysis
- `GET /ai-engine/communication/` - List communication analyses
- `GET /ai-engine/communication/{id}/` - Retrieve specific analysis
- `POST /ai-engine/communication/analyze-patterns/` - Analyze communication patterns
- `POST /ai-engine/communication/analyze-user/` - User communication analysis
- `GET /ai-engine/communication/therapeutic-relationship/` - Relationship metrics

### 5. Personalized Tips
- `GET /ai-engine/tips/mood/` - Mood-based recommendations
- `GET /ai-engine/tips/journaling/` - Journaling suggestions
- `GET /ai-engine/tips/combined/` - Combined recommendations

### 6. Therapist Analytics
- `GET /ai-engine/resume/{user_id}/` - Complete user analytics resume
- `GET /ai-engine/resume/{user_id}/card/{card_type}/` - Individual analytics cards

## Advanced Features

### 1. Quality Control System
- **Data Quality Thresholds**: Minimum 0.2 overall quality for analysis
- **Multi-source Validation**: Verification across multiple data sources
- **Graceful Degradation**: Default analysis when data insufficient
- **Error Recovery**: Comprehensive error handling and logging

### 2. Real-time Processing
- **Signal-based Triggers**: Automatic analysis on new data
- **Background Processing**: Non-blocking analysis execution
- **Quality Gating**: Only high-quality data triggers analysis
- **Performance Monitoring**: Detailed logging and metrics

### 3. LLM Integration
- **Ollama/Mistral Integration**: Advanced natural language processing
- **Prompt Engineering**: Specialized prompts for different analysis types
- **Response Parsing**: Intelligent parsing of LLM outputs
- **Fallback Mechanisms**: Default responses when LLM unavailable

### 4. Therapeutic Focus
- **Crisis Detection**: Real-time crisis identification
- **Progress Tracking**: Long-term therapeutic progress analysis
- **Personalized Recommendations**: AI-driven therapeutic suggestions
- **Professional Integration**: Therapist-focused analytics and insights

## Integration with Other Components

### With Chatbot:
- Provides AI insights for chatbot context
- Crisis detection triggers for emergency responses
- Personalized conversation suggestions
- Therapeutic progress updates

### With Datawarehouse:
- Clean data interface without direct model access
- Quality-validated data consumption
- Efficient caching utilization
- Real-time data processing

### With Patient/Therapist Apps:
- Real-time analysis triggers
- Professional analytics dashboards
- Progress tracking and reporting
- Personalized recommendation delivery

## Security & Privacy
- **Data Isolation**: Clean separation between AI processing and raw data
- **Quality Validation**: Ensures only valid data is processed
- **Error Handling**: Prevents data leakage through comprehensive error management
- **Access Control**: Proper authentication and authorization for all endpoints

This documentation represents the verified, complete, and accurate state of the MindCare AI Engine as of the current codebase analysis.
