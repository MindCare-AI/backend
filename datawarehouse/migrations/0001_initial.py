# Generated by Django 4.2.7 on 2025-06-01 10:29

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="PredictiveModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "model_type",
                    models.CharField(
                        choices=[
                            ("mood_prediction", "Mood Prediction"),
                            ("crisis_detection", "Crisis Detection"),
                            ("engagement_prediction", "Engagement Prediction"),
                            ("outcome_prediction", "Therapy Outcome Prediction"),
                        ],
                        max_length=50,
                    ),
                ),
                ("version", models.CharField(max_length=20)),
                (
                    "features_used",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100),
                        default=list,
                        size=None,
                    ),
                ),
                ("hyperparameters", models.JSONField(default=dict)),
                ("training_data_size", models.IntegerField()),
                ("training_date", models.DateTimeField()),
                ("accuracy", models.FloatField(null=True)),
                ("precision", models.FloatField(null=True)),
                ("recall", models.FloatField(null=True)),
                ("f1_score", models.FloatField(null=True)),
                ("auc_score", models.FloatField(null=True)),
                ("is_active", models.BooleanField(default=False)),
                ("is_production", models.BooleanField(default=False)),
                ("model_path", models.CharField(max_length=500)),
                ("feature_importance", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["model_type", "is_active"],
                        name="datawarehou_model_t_a221c6_idx",
                    ),
                    models.Index(
                        fields=["is_production"], name="datawarehou_is_prod_0747ab_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="DataQualityReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("report_date", models.DateField(unique=True)),
                ("users_with_mood_data", models.IntegerField(default=0)),
                ("users_with_journal_data", models.IntegerField(default=0)),
                ("users_with_communication_data", models.IntegerField(default=0)),
                ("data_completeness_score", models.FloatField()),
                ("avg_data_age_hours", models.FloatField()),
                ("stale_records_count", models.IntegerField(default=0)),
                ("duplicate_records_found", models.IntegerField(default=0)),
                ("inconsistency_issues", models.JSONField(default=list)),
                ("total_records_processed", models.IntegerField(default=0)),
                ("new_records_today", models.IntegerField(default=0)),
                ("critical_issues", models.JSONField(default=list)),
                ("warnings", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["-report_date"],
                "indexes": [
                    models.Index(
                        fields=["-report_date"], name="datawarehou_report__9adc65_idx"
                    ),
                    models.Index(
                        fields=["data_completeness_score"],
                        name="datawarehou_data_co_b84565_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="DataCollectionRun",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "run_type",
                    models.CharField(
                        choices=[
                            ("full_sync", "Full Synchronization"),
                            ("incremental", "Incremental Update"),
                            ("realtime", "Real-time Collection"),
                            ("backfill", "Historical Backfill"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("partial", "Partially Completed"),
                        ],
                        default="running",
                        max_length=20,
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("records_processed", models.IntegerField(default=0)),
                ("errors_count", models.IntegerField(default=0)),
                ("metadata", models.JSONField(default=dict)),
            ],
            options={
                "ordering": ["-started_at"],
                "indexes": [
                    models.Index(
                        fields=["run_type", "status"],
                        name="datawarehou_run_typ_a89f5d_idx",
                    ),
                    models.Index(
                        fields=["-started_at"], name="datawarehou_started_5ecfc2_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="UserDataSnapshot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("snapshot_date", models.DateField()),
                ("mood_entries_count", models.IntegerField(default=0)),
                ("avg_mood_score", models.FloatField(null=True)),
                ("mood_volatility", models.FloatField(null=True)),
                ("dominant_mood", models.CharField(max_length=50, null=True)),
                (
                    "mood_trend",
                    models.CharField(
                        choices=[
                            ("improving", "Improving"),
                            ("declining", "Declining"),
                            ("stable", "Stable"),
                            ("volatile", "Volatile"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("journal_entries_count", models.IntegerField(default=0)),
                ("avg_journal_length", models.FloatField(null=True)),
                ("total_words_written", models.IntegerField(default=0)),
                ("avg_sentiment_score", models.FloatField(null=True)),
                ("writing_consistency_score", models.FloatField(null=True)),
                (
                    "journal_topics",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100),
                        default=list,
                        size=None,
                    ),
                ),
                ("messages_sent", models.IntegerField(default=0)),
                ("messages_received", models.IntegerField(default=0)),
                ("avg_response_time_minutes", models.FloatField(null=True)),
                ("communication_sentiment", models.FloatField(null=True)),
                ("app_sessions_count", models.IntegerField(default=0)),
                ("total_session_duration_minutes", models.IntegerField(default=0)),
                (
                    "features_used",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        default=list,
                        size=None,
                    ),
                ),
                ("posts_created", models.IntegerField(default=0)),
                ("comments_made", models.IntegerField(default=0)),
                ("likes_given", models.IntegerField(default=0)),
                ("likes_received", models.IntegerField(default=0)),
                ("social_engagement_score", models.FloatField(null=True)),
                ("crisis_indicators_count", models.IntegerField(default=0)),
                ("risk_score", models.FloatField(null=True)),
                ("needs_attention", models.BooleanField(default=False)),
                ("data_completeness_score", models.FloatField(default=1.0)),
                ("data_quality_score", models.FloatField(default=1.0)),
                ("last_updated", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-snapshot_date"],
                "indexes": [
                    models.Index(
                        fields=["user", "-snapshot_date"],
                        name="datawarehou_user_id_bb8035_idx",
                    ),
                    models.Index(
                        fields=["snapshot_date"], name="datawarehou_snapsho_b61b27_idx"
                    ),
                    models.Index(
                        fields=["risk_score"], name="datawarehou_risk_sc_0e268d_idx"
                    ),
                    models.Index(
                        fields=["needs_attention"],
                        name="datawarehou_needs_a_f7f7c3_idx",
                    ),
                ],
                "unique_together": {("user", "snapshot_date")},
            },
        ),
        migrations.CreateModel(
            name="MoodTrendAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "analysis_type",
                    models.CharField(
                        choices=[
                            ("daily", "Daily"),
                            ("weekly", "Weekly"),
                            ("monthly", "Monthly"),
                            ("quarterly", "Quarterly"),
                        ],
                        max_length=20,
                    ),
                ),
                ("period_start", models.DateField()),
                ("period_end", models.DateField()),
                (
                    "trend_direction",
                    models.CharField(
                        choices=[
                            ("strongly_improving", "Strongly Improving"),
                            ("improving", "Improving"),
                            ("stable", "Stable"),
                            ("declining", "Declining"),
                            ("strongly_declining", "Strongly Declining"),
                        ],
                        max_length=20,
                    ),
                ),
                ("trend_strength", models.FloatField()),
                ("volatility_score", models.FloatField()),
                ("consistency_score", models.FloatField()),
                ("avg_mood", models.FloatField()),
                ("median_mood", models.FloatField()),
                ("min_mood", models.FloatField()),
                ("max_mood", models.FloatField()),
                ("mood_range", models.FloatField()),
                ("pattern_data", models.JSONField(default=dict)),
                ("correlation_data", models.JSONField(default=dict)),
                ("anomalies", models.JSONField(default=list)),
                ("next_period_prediction", models.FloatField(null=True)),
                ("prediction_confidence", models.FloatField(null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-period_start"],
                "indexes": [
                    models.Index(
                        fields=["user", "analysis_type", "-period_start"],
                        name="datawarehou_user_id_b786d6_idx",
                    ),
                    models.Index(
                        fields=["trend_direction"],
                        name="datawarehou_trend_d_fccfde_idx",
                    ),
                ],
                "unique_together": {("user", "analysis_type", "period_start")},
            },
        ),
        migrations.CreateModel(
            name="JournalInsightCache",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("analysis_date", models.DateTimeField(auto_now_add=True)),
                ("period_days", models.IntegerField(default=30)),
                ("sentiment_trends", models.JSONField(default=dict)),
                ("emotion_distribution", models.JSONField(default=dict)),
                ("sentiment_volatility", models.FloatField(null=True)),
                ("topic_clusters", models.JSONField(default=dict)),
                ("keyword_frequency", models.JSONField(default=dict)),
                ("themes_evolution", models.JSONField(default=dict)),
                ("writing_patterns", models.JSONField(default=dict)),
                ("linguistic_features", models.JSONField(default=dict)),
                ("readability_scores", models.JSONField(default=dict)),
                ("therapeutic_progress", models.JSONField(default=dict)),
                (
                    "coping_strategies_mentioned",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100),
                        default=list,
                        size=None,
                    ),
                ),
                ("goals_and_intentions", models.JSONField(default=list)),
                ("cache_version", models.CharField(default="1.0", max_length=10)),
                ("expires_at", models.DateTimeField()),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-analysis_date"],
                "indexes": [
                    models.Index(
                        fields=["user", "-analysis_date"],
                        name="datawarehou_user_id_a2ef10_idx",
                    ),
                    models.Index(
                        fields=["expires_at"], name="datawarehou_expires_5c25b2_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="FeatureUsageMetrics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("mood_logs_created", models.IntegerField(default=0)),
                ("journal_entries_created", models.IntegerField(default=0)),
                ("messages_sent", models.IntegerField(default=0)),
                ("appointments_scheduled", models.IntegerField(default=0)),
                ("session_count", models.IntegerField(default=0)),
                ("total_time_spent_minutes", models.IntegerField(default=0)),
                (
                    "features_used",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        default=list,
                        size=None,
                    ),
                ),
                ("breathing_exercises_completed", models.IntegerField(default=0)),
                ("coping_strategies_accessed", models.IntegerField(default=0)),
                ("crisis_resources_accessed", models.IntegerField(default=0)),
                ("posts_created", models.IntegerField(default=0)),
                ("comments_made", models.IntegerField(default=0)),
                ("likes_given", models.IntegerField(default=0)),
                ("chatbot_conversations", models.IntegerField(default=0)),
                ("ai_recommendations_viewed", models.IntegerField(default=0)),
                ("ai_insights_acknowledged", models.IntegerField(default=0)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-date"],
                "indexes": [
                    models.Index(
                        fields=["user", "-date"], name="datawarehou_user_id_3c1fa3_idx"
                    ),
                    models.Index(fields=["date"], name="datawarehou_date_a3df24_idx"),
                ],
                "unique_together": {("user", "date")},
            },
        ),
        migrations.CreateModel(
            name="CommunicationMetrics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("period_start", models.DateField()),
                ("period_end", models.DateField()),
                ("total_messages_sent", models.IntegerField(default=0)),
                ("total_messages_received", models.IntegerField(default=0)),
                ("avg_message_length", models.FloatField(null=True)),
                ("response_rate", models.FloatField(null=True)),
                ("avg_response_time_hours", models.FloatField(null=True)),
                ("most_active_hour", models.IntegerField(null=True)),
                ("communication_consistency", models.FloatField(null=True)),
                ("therapist_conversations", models.IntegerField(default=0)),
                ("peer_conversations", models.IntegerField(default=0)),
                ("support_seeking_score", models.FloatField(null=True)),
                ("support_giving_score", models.FloatField(null=True)),
                ("sentiment_distribution", models.JSONField(default=dict)),
                ("emotional_expression_score", models.FloatField(null=True)),
                ("topic_diversity", models.FloatField(null=True)),
                ("crisis_language_detected", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-period_start"],
                "indexes": [
                    models.Index(
                        fields=["user", "-period_start"],
                        name="datawarehou_user_id_610062_idx",
                    ),
                    models.Index(
                        fields=["crisis_language_detected"],
                        name="datawarehou_crisis__307f54_idx",
                    ),
                ],
                "unique_together": {("user", "period_start")},
            },
        ),
    ]
