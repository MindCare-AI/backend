# Generated by Django 4.2.7 on 2025-06-02 22:27

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("datawarehouse", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="AIAnalysisDataset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("collection_date", models.DateTimeField(auto_now_add=True)),
                ("period_days", models.IntegerField()),
                (
                    "mood_summary",
                    models.JSONField(
                        default=dict, help_text="Processed mood analytics"
                    ),
                ),
                (
                    "journal_insights",
                    models.JSONField(default=dict, help_text="Processed journal data"),
                ),
                (
                    "behavioral_patterns",
                    models.JSONField(default=dict, help_text="User behavior analytics"),
                ),
                (
                    "communication_metrics",
                    models.JSONField(default=dict, help_text="Communication data"),
                ),
                (
                    "therapy_session_data",
                    models.JSONField(
                        default=dict, help_text="Therapy session analytics"
                    ),
                ),
                (
                    "social_engagement_data",
                    models.JSONField(default=dict, help_text="Social feeds analytics"),
                ),
                (
                    "risk_indicators",
                    models.JSONField(
                        default=dict, help_text="Risk assessment indicators"
                    ),
                ),
                (
                    "progress_markers",
                    models.JSONField(
                        default=dict, help_text="Therapeutic progress markers"
                    ),
                ),
                (
                    "pattern_analysis",
                    models.JSONField(
                        default=dict, help_text="Behavioral and mood patterns"
                    ),
                ),
                (
                    "correlation_data",
                    models.JSONField(
                        default=dict, help_text="Cross-domain correlations"
                    ),
                ),
                (
                    "data_completeness_score",
                    models.FloatField(
                        default=0.0, help_text="0-1 score of data completeness"
                    ),
                ),
                (
                    "data_quality_indicators",
                    models.JSONField(
                        default=dict, help_text="Quality metrics per data source"
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        default=0.0, help_text="Confidence in analysis reliability"
                    ),
                ),
                ("processing_version", models.CharField(default="1.0", max_length=20)),
                (
                    "data_sources_used",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        default=list,
                        size=None,
                    ),
                ),
                ("processing_duration_seconds", models.FloatField(null=True)),
                ("ready_for_mood_analysis", models.BooleanField(default=False)),
                ("ready_for_journal_analysis", models.BooleanField(default=False)),
                ("ready_for_behavior_analysis", models.BooleanField(default=False)),
                (
                    "ready_for_communication_analysis",
                    models.BooleanField(default=False),
                ),
                ("ready_for_therapy_analysis", models.BooleanField(default=False)),
                (
                    "expires_at",
                    models.DateTimeField(help_text="When this dataset expires"),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-collection_date"],
            },
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("create", "Create"),
                            ("update", "Update"),
                            ("delete", "Delete"),
                            ("access", "Access"),
                            ("login", "Login"),
                            ("logout", "Logout"),
                            ("export", "Data Export"),
                            ("import", "Data Import"),
                            ("backup", "Backup"),
                            ("restore", "Restore"),
                        ],
                        max_length=20,
                    ),
                ),
                ("object_id", models.CharField(max_length=255, null=True)),
                ("event_name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("metadata", models.JSONField(default=dict)),
                ("ip_address", models.GenericIPAddressField(null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("session_id", models.CharField(blank=True, max_length=100)),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="low",
                        max_length=10,
                    ),
                ),
                (
                    "compliance_tags",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        blank=True,
                        default=list,
                        size=None,
                    ),
                ),
                ("integrity_hash", models.CharField(max_length=64)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "datawarehouse_audit_log",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="BackupJob",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "backup_type",
                    models.CharField(
                        choices=[
                            ("full", "Full Backup"),
                            ("incremental", "Incremental Backup"),
                            ("differential", "Differential Backup"),
                            ("snapshot", "Database Snapshot"),
                            ("selective", "Selective Backup"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("scheduled", models.BooleanField(default=False)),
                ("schedule_name", models.CharField(blank=True, max_length=100)),
                ("storage_location", models.CharField(max_length=500)),
                ("storage_type", models.CharField(default="local", max_length=50)),
                ("file_size", models.BigIntegerField(null=True)),
                ("compressed_size", models.BigIntegerField(null=True)),
                ("compression_ratio", models.FloatField(null=True)),
                ("is_encrypted", models.BooleanField(default=True)),
                ("encryption_key_id", models.CharField(blank=True, max_length=64)),
                ("integrity_hash", models.CharField(max_length=128)),
                ("started_at", models.DateTimeField(null=True)),
                ("completed_at", models.DateTimeField(null=True)),
                ("duration_seconds", models.IntegerField(null=True)),
                (
                    "included_models",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100),
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "excluded_models",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100),
                        default=list,
                        size=None,
                    ),
                ),
                ("record_count", models.BigIntegerField(null=True)),
                ("metadata", models.JSONField(default=dict)),
                ("retention_days", models.IntegerField(default=30)),
                ("expires_at", models.DateTimeField()),
                ("auto_cleanup", models.BooleanField(default=True)),
                ("error_message", models.TextField(blank=True)),
                ("error_details", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "initiated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "datawarehouse_backup_job",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="EncryptionKey",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("key_id", models.CharField(max_length=64, unique=True)),
                ("encrypted_key", models.TextField()),
                ("algorithm", models.CharField(default="fernet", max_length=50)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                ("is_active", models.BooleanField(default=True)),
                (
                    "rotation_schedule",
                    models.CharField(default="quarterly", max_length=20),
                ),
            ],
            options={
                "db_table": "datawarehouse_encryption_key",
                "indexes": [
                    models.Index(
                        fields=["key_id", "is_active"],
                        name="datawarehou_key_id_793f4d_idx",
                    ),
                    models.Index(
                        fields=["expires_at"], name="datawarehou_expires_1db54b_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="AIDataQualityReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("generated_at", models.DateTimeField(auto_now_add=True)),
                ("mood_data_quality", models.FloatField(default=0.0)),
                ("journal_data_quality", models.FloatField(default=0.0)),
                ("behavior_data_quality", models.FloatField(default=0.0)),
                ("communication_data_quality", models.FloatField(default=0.0)),
                ("therapy_data_quality", models.FloatField(default=0.0)),
                ("data_coverage_percentage", models.FloatField(default=0.0)),
                ("temporal_coverage_score", models.FloatField(default=0.0)),
                ("missing_data_indicators", models.JSONField(default=dict)),
                ("data_inconsistencies", models.JSONField(default=list)),
                ("outliers_detected", models.JSONField(default=list)),
                ("quality_recommendations", models.JSONField(default=list)),
                ("minimum_additional_data_needed", models.JSONField(default=dict)),
                (
                    "dataset",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="datawarehouse.aianalysisdataset",
                    ),
                ),
            ],
            options={
                "ordering": ["-generated_at"],
            },
        ),
        migrations.CreateModel(
            name="AccessLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("resource_type", models.CharField(max_length=100)),
                ("resource_id", models.CharField(max_length=100)),
                ("action", models.CharField(max_length=50)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField()),
                ("session_id", models.CharField(max_length=100)),
                ("access_granted", models.BooleanField()),
                ("denial_reason", models.TextField(blank=True)),
                (
                    "classification_level",
                    models.CharField(
                        choices=[
                            ("public", "Public"),
                            ("internal", "Internal"),
                            ("confidential", "Confidential"),
                            ("restricted", "Restricted"),
                            ("phi", "Protected Health Information"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("compliance_context", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "datawarehouse_access_log",
            },
        ),
        migrations.CreateModel(
            name="RestoreJob",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "restore_type",
                    models.CharField(
                        choices=[
                            ("full", "Full Restore"),
                            ("partial", "Partial Restore"),
                            ("selective", "Selective Restore"),
                            ("point_in_time", "Point-in-Time Restore"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "target_environment",
                    models.CharField(default="current", max_length=50),
                ),
                ("target_database", models.CharField(blank=True, max_length=100)),
                (
                    "included_models",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100),
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "excluded_models",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=100),
                        default=list,
                        size=None,
                    ),
                ),
                ("restore_point", models.DateTimeField(null=True)),
                ("total_records", models.BigIntegerField(null=True)),
                ("processed_records", models.BigIntegerField(default=0)),
                ("failed_records", models.BigIntegerField(default=0)),
                ("started_at", models.DateTimeField(null=True)),
                ("completed_at", models.DateTimeField(null=True)),
                ("duration_seconds", models.IntegerField(null=True)),
                (
                    "verification_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("passed", "Passed"),
                            ("failed", "Failed"),
                            ("skipped", "Skipped"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("verification_details", models.JSONField(default=dict)),
                ("error_message", models.TextField(blank=True)),
                ("error_details", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "backup_job",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="restore_jobs",
                        to="datawarehouse.backupjob",
                    ),
                ),
                (
                    "initiated_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "datawarehouse_restore_job",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["backup_job", "status"],
                        name="datawarehou_backup__82677a_idx",
                    ),
                    models.Index(
                        fields=["initiated_by", "created_at"],
                        name="datawarehou_initiat_78d69a_idx",
                    ),
                    models.Index(
                        fields=["status", "created_at"],
                        name="datawarehou_status_fdf9fe_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="DataProcessingQueue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("requested_at", models.DateTimeField(auto_now_add=True)),
                ("period_days", models.IntegerField()),
                (
                    "analysis_types",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=50),
                        default=list,
                        size=None,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("normal", "Normal"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="normal",
                        max_length=10,
                    ),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("error_message", models.TextField(blank=True)),
                ("processing_attempts", models.IntegerField(default=0)),
                ("estimated_duration_seconds", models.IntegerField(null=True)),
                ("actual_duration_seconds", models.IntegerField(null=True)),
                (
                    "result_dataset",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="datawarehouse.aianalysisdataset",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-priority", "-requested_at"],
                "indexes": [
                    models.Index(
                        fields=["status", "priority"],
                        name="datawarehou_status_62c031_idx",
                    ),
                    models.Index(
                        fields=["user", "-requested_at"],
                        name="datawarehou_user_id_524631_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="DataClassificationRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("model_name", models.CharField(max_length=100)),
                ("field_name", models.CharField(max_length=100)),
                (
                    "classification",
                    models.CharField(
                        choices=[
                            ("public", "Public"),
                            ("internal", "Internal"),
                            ("confidential", "Confidential"),
                            ("restricted", "Restricted"),
                            ("phi", "Protected Health Information"),
                        ],
                        default="internal",
                        max_length=20,
                    ),
                ),
                ("compliance_requirements", models.JSONField(default=list)),
                ("encryption_required", models.BooleanField(default=False)),
                ("access_restrictions", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "classified_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "datawarehouse_data_classification",
                "unique_together": {("model_name", "field_name")},
            },
        ),
        migrations.CreateModel(
            name="DataChangeHistory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("field_name", models.CharField(max_length=100)),
                ("old_value", models.TextField(null=True)),
                ("new_value", models.TextField(null=True)),
                ("value_type", models.CharField(max_length=50)),
                ("is_encrypted", models.BooleanField(default=False)),
                ("encryption_key_id", models.CharField(blank=True, max_length=64)),
                ("change_reason", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "audit_log",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="field_changes",
                        to="datawarehouse.auditlog",
                    ),
                ),
            ],
            options={
                "db_table": "datawarehouse_data_change_history",
                "indexes": [
                    models.Index(
                        fields=["audit_log", "field_name"],
                        name="datawarehou_audit_l_20e83e_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="datawarehou_created_1bb514_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="backupjob",
            index=models.Index(
                fields=["status", "backup_type"], name="datawarehou_status_b4ce98_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="backupjob",
            index=models.Index(
                fields=["scheduled", "created_at"],
                name="datawarehou_schedul_14f729_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="backupjob",
            index=models.Index(
                fields=["expires_at"], name="datawarehou_expires_b9adc9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="backupjob",
            index=models.Index(
                fields=["initiated_by", "created_at"],
                name="datawarehou_initiat_f5bae8_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["event_type", "created_at"],
                name="datawarehou_event_t_574870_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["user", "created_at"], name="datawarehou_user_id_8e85ee_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["content_type", "object_id"],
                name="datawarehou_content_dbd507_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="auditlog",
            index=models.Index(
                fields=["severity", "created_at"], name="datawarehou_severit_8c333d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="aianalysisdataset",
            index=models.Index(
                fields=["user", "-collection_date"],
                name="datawarehou_user_id_d12937_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="aianalysisdataset",
            index=models.Index(
                fields=["expires_at", "is_active"],
                name="datawarehou_expires_7dbff8_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="aianalysisdataset",
            index=models.Index(
                fields=["data_completeness_score"],
                name="datawarehou_data_co_76918d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="aianalysisdataset",
            index=models.Index(
                fields=["ready_for_mood_analysis", "ready_for_journal_analysis"],
                name="datawarehou_ready_f_76a71e_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="aianalysisdataset",
            unique_together={("user", "period_days", "collection_date")},
        ),
        migrations.AddIndex(
            model_name="accesslog",
            index=models.Index(
                fields=["user", "created_at"], name="datawarehou_user_id_e73c96_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="accesslog",
            index=models.Index(
                fields=["resource_type", "action"],
                name="datawarehou_resourc_4f326d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="accesslog",
            index=models.Index(
                fields=["ip_address", "created_at"],
                name="datawarehou_ip_addr_eecb30_idx",
            ),
        ),
    ]
