@startuml MindCare-IA_Global_Sequence_Diagram
!theme plain
skinparam participant {
    BackgroundColor #F8F9FA
    BorderColor #6C757D
    FontName "Arial"
    FontSize 10
}

title MindCare-IA Platform - Global Sequence Diagram\nMain Interaction Flows

' ========== ACTORS ==========
actor Patient as P
actor Therapist as T
actor Admin as A

' ========== SYSTEM COMPONENTS ==========
participant "Authentication\nService" as Auth
participant "User\nManagement" as User
participant "Mood\nTracker" as Mood
participant "Journal\nSystem" as Journal
participant "AI Chatbot" as Chatbot
participant "AI Engine" as AI
participant "Appointment\nService" as Appt
participant "Messaging\nService" as Msg
participant "Notification\nSystem" as Notif
participant "Media\nHandler" as Media
participant "Analytics\nEngine" as Analytics
participant "Database" as DB
participant "WebSocket\nHandler" as WS

== 1. USER REGISTRATION & AUTHENTICATION ==

P -> Auth: register(email, password, user_type)
Auth -> User: create_user_profile()
User -> DB: save_user_data()
Auth -> Notif: send_verification_email()
Notif -> P: verification_email_sent

P -> Auth: verify_email(token)
Auth -> User: activate_account()
User -> DB: update_user_status()
Auth -> P: account_activated

P -> Auth: login(email, password)
Auth -> DB: validate_credentials()
Auth -> User: get_user_profile()
Auth -> P: authentication_token + user_data

== 2. PATIENT MOOD TRACKING FLOW ==

P -> Mood: log_daily_mood(mood_value, energy_level, activities)
Mood -> DB: save_mood_entry()
Mood -> AI: analyze_mood_data(mood_entry)
AI -> DB: save_mood_analysis()
AI -> Analytics: update_mood_trends()

alt Crisis Detection
    AI -> AI: detect_crisis_patterns()
    AI -> Notif: trigger_crisis_alert()
    Notif -> T: crisis_notification(patient_id)
    Notif -> P: support_resources()
end

Mood -> P: mood_logged_successfully

== 3. JOURNAL ENTRY WITH AI ANALYSIS ==

P -> Journal: create_journal_entry(content, mood_id)
Journal -> DB: save_journal_entry()
Journal -> AI: analyze_journal_sentiment(content)

par AI Processing
    AI -> AI: sentiment_analysis()
    AI -> AI: extract_keywords()
    AI -> AI: detect_emotional_patterns()
    AI -> DB: save_ai_insights()
end

AI -> Journal: analysis_complete(insights)
Journal -> P: journal_entry_created(insights)

== 4. AI CHATBOT INTERACTION ==

P -> Chatbot: start_conversation()
Chatbot -> DB: create_conversation_session()
Chatbot -> P: welcome_message

loop Conversation Flow
    P -> Chatbot: send_message(text)
    Chatbot -> AI: process_message(text, context)
    AI -> AI: generate_therapeutic_response()
    
    alt Crisis Detection
        AI -> Notif: send_crisis_alert()
        Notif -> T: crisis_notification()
    end
    
    AI -> Chatbot: therapeutic_response(text, recommendations)
    Chatbot -> DB: save_conversation_turn()
    Chatbot -> P: ai_response(text, tips)
end

== 5. APPOINTMENT SCHEDULING FLOW ==

P -> Appt: view_available_slots(therapist_id, date_range)
Appt -> DB: get_therapist_availability()
Appt -> P: available_slots[]

P -> Appt: schedule_appointment(therapist_id, slot_time)
Appt -> DB: create_appointment()
Appt -> Notif: send_appointment_confirmation()

par Notifications
    Notif -> P: appointment_confirmed
    Notif -> T: new_appointment_request
end

Appt -> P: appointment_scheduled

== 6. THERAPIST-PATIENT MESSAGING ==

T -> Msg: send_message(patient_id, content, media?)
Msg -> DB: save_message()

alt Media Attachment
    Msg -> Media: upload_media(file)
    Media -> DB: save_media_metadata()
    Media -> Msg: media_url
end

Msg -> WS: broadcast_message(patient_id)
WS -> P: real_time_message(content)
Msg -> Notif: queue_notification(patient_id)
Notif -> P: message_notification

P -> Msg: mark_as_read(message_id)
Msg -> DB: update_message_status()
Msg -> WS: send_read_receipt(therapist_id)
WS -> T: message_read_confirmation

== 7. SESSION NOTES & CLINICAL WORKFLOW ==

T -> Appt: create_session_notes(appointment_id, notes, pain_level)
Appt -> DB: save_session_notes()
Appt -> Analytics: update_patient_progress()
Analytics -> AI: analyze_treatment_progress()
AI -> Analytics: progress_insights()
Appt -> T: session_notes_saved

== 8. SOCIAL FEEDS & COMMUNITY ==

P -> User: create_post(content, media?, topic)
User -> DB: save_post()

alt Media Upload
    User -> Media: upload_media(files)
    Media -> DB: save_media_files()
    Media -> User: media_urls[]
end

User -> Analytics: track_user_engagement()
User -> Notif: notify_followers()
User -> P: post_created

T -> User: react_to_post(post_id, reaction_type)
User -> DB: save_reaction()
User -> WS: broadcast_reaction(post_author_id)
WS -> P: real_time_reaction_update
User -> Notif: queue_reaction_notification()
User -> T: reaction_saved

== 9. CRISIS INTERVENTION WORKFLOW ==

AI -> AI: detect_crisis_indicators(mood_data, journal_content, chat_history)
AI -> Notif: trigger_crisis_alert(patient_id, severity_level)

par Crisis Response
    Notif -> T: immediate_crisis_notification()
    Notif -> A: admin_crisis_alert()
    Notif -> P: emergency_resources()
end

T -> Msg: send_urgent_message(patient_id, "crisis_support")
Msg -> WS: priority_message_delivery()
WS -> P: urgent_therapist_message

A -> User: initiate_crisis_intervention(patient_id)
User -> DB: log_crisis_intervention()

== 10. ANALYTICS & REPORTING ==

Analytics -> DB: aggregate_user_data()
Analytics -> AI: generate_insights()
AI -> Analytics: processed_insights()

alt Scheduled Reports
    Analytics -> Analytics: generate_periodic_reports()
    Analytics -> Notif: send_report_notifications()
    Notif -> T: weekly_patient_progress_report
    Notif -> A: system_usage_analytics
end

T -> Analytics: request_custom_report(patient_id, date_range)
Analytics -> DB: query_patient_data()
Analytics -> AI: analyze_patient_progress()
AI -> Analytics: progress_analysis()
Analytics -> T: patient_progress_report(pdf)

== 11. REAL-TIME NOTIFICATIONS ==

loop Background Process
    Notif -> DB: check_pending_notifications()
    Notif -> Notif: process_notification_queue()
    
    alt In-App Notification
        Notif -> WS: send_real_time_notification()
        WS -> P: live_notification()
    end
    
    alt Push Notification
        Notif -> Notif: send_push_notification()
    end
    
    alt Email Notification
        Notif -> Notif: send_email_notification()
    end
end

== 12. SYSTEM MONITORING & ADMIN ==

A -> Analytics: view_system_dashboard()
Analytics -> DB: get_system_metrics()
Analytics -> A: system_health_data()

A -> User: manage_user_account(user_id, action)
User -> DB: update_user_status()
User -> Notif: notify_user_of_changes()
User -> A: account_updated

A -> Notif: configure_notification_settings()
Notif -> DB: update_notification_config()
Notif -> A: settings_updated

@enduml
