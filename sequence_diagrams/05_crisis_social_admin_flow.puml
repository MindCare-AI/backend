@startuml MindCare-IA_Crisis_Social_Admin_Flow
!theme plain
skinparam participant {
    BackgroundColor #F8F9FA
    BorderColor #6C757D
    FontName "Arial"
    FontSize 10
}

title MindCare-IA Platform - Crisis Management, Social Features & Admin Flow

actor Patient as P
actor Therapist as T
actor Admin as A
participant "AI Engine" as AI
participant "Social\nFeeds" as Social
participant "Notification\nSystem" as Notif
participant "Analytics\nEngine" as Analytics
participant "WebSocket\nHandler" as WS
participant "Database" as DB

== Crisis Detection & Intervention ==

AI -> AI: continuous_monitoring(mood_data, journal_entries, chat_messages)
AI -> AI: detect_crisis_patterns(depression_keywords, suicidal_ideation)
AI -> AI: calculate_risk_score(severity_level="HIGH")

AI -> Notif: trigger_immediate_crisis_alert(patient_id, risk_score)
par Emergency Response
    Notif -> T: send_crisis_notification(patient_info, risk_details)
    Notif -> A: send_admin_crisis_alert(patient_id, severity)
    Notif -> P: send_emergency_resources(hotlines, support_contacts)
end

T -> Notif: acknowledge_crisis_alert(patient_id)
T -> P: initiate_crisis_contact("I'm here to help, please respond")
P -> T: respond_to_crisis_contact("I'm struggling but safe")

A -> Analytics: log_crisis_intervention(patient_id, response_time, outcome)
Analytics -> DB: save_crisis_event_data(intervention_details)

== Social Community Features ==

P -> Social: create_support_post(content="Feeling better today", topic="recovery")
Social -> DB: save_post(author_id, content, topic)
Social -> Analytics: track_engagement_metrics(post_id)
Social -> P: post_created_successfully

P -> Social: view_community_feed(topic_filter="anxiety")
Social -> DB: fetch_relevant_posts(user_interests, topic_filter)
Social -> Analytics: track_feed_engagement(user_id)
Social -> P: display_filtered_feed(posts[])

T -> Social: react_to_patient_post(post_id, reaction="supportive")
Social -> DB: save_reaction(therapist_id, post_id, reaction_type)
Social -> WS: broadcast_real_time_reaction(post_author_id)
WS -> P: receive_therapist_support_notification()
Social -> Notif: queue_reaction_notification(post_author_id)

P -> Social: comment_on_post(post_id, "Thank you for sharing")
Social -> DB: save_comment(commenter_id, post_id, comment_text)
Social -> WS: broadcast_new_comment(post_author_id)
Social -> Notif: notify_post_author(new_comment=True)
Social -> P: comment_posted_successfully

== Administrative Monitoring ==

A -> Analytics: view_system_dashboard()
Analytics -> DB: aggregate_platform_metrics()
Analytics -> Analytics: calculate_user_engagement_stats()
Analytics -> Analytics: analyze_crisis_intervention_effectiveness()
Analytics -> A: comprehensive_dashboard(metrics, alerts, trends)

A -> Analytics: generate_monthly_report(report_type="clinical_outcomes")
Analytics -> DB: query_therapeutic_progress_data()
Analytics -> AI: analyze_treatment_effectiveness()
AI -> Analytics: treatment_insights(success_rates, improvement_patterns)
Analytics -> A: monthly_clinical_report(pdf_download)

== Content Moderation ==

AI -> Social: scan_posts_for_violations(inappropriate_content, crisis_indicators)
AI -> A: flag_concerning_content(post_id, violation_type, severity)
A -> Social: review_flagged_content(post_id)
Social -> DB: fetch_post_details(post_id, author_info, context)
Social -> A: content_review_data(post_content, author_history)

A -> Social: moderate_content(post_id, action="warning")
Social -> DB: update_post_status(moderated=True, action_taken)
Social -> Notif: notify_content_author(post_id, moderation_action)
Notif -> P: content_moderation_notification(warning_message)

== System Performance Monitoring ==

Analytics -> Analytics: monitor_system_performance()
Analytics -> DB: check_database_performance_metrics()
Analytics -> Analytics: analyze_api_response_times()
Analytics -> Analytics: monitor_user_session_duration()

alt Performance Issues Detected
    Analytics -> A: send_performance_alert(issue_type, severity)
    A -> Analytics: acknowledge_alert()
    A -> Analytics: request_detailed_diagnostics()
    Analytics -> A: diagnostic_report(bottlenecks, recommendations)
end

== User Account Management ==

A -> Analytics: view_user_account(user_id)
Analytics -> DB: fetch_complete_user_profile(user_id)
Analytics -> A: user_account_details(profile, activity, therapeutic_progress)

A -> Notif: send_user_notification(user_id, "Account update required")
Notif -> P: account_update_notification(required_actions)

A -> DB: update_user_permissions(user_id, new_permissions)
A -> Notif: notify_user_permission_change(user_id)
Notif -> P: permissions_updated_notification()

@enduml
