@startuml

skinparam sequenceArrowThickness 2
skinparam roundcorner 5
skinparam maxmessagesize 160
skinparam sequenceParticipant underline
skinparam handwritten false
skinparam monochrome true

' Define participants with actor icons
actor "Patient" as Patient
participant "Frontend" as Frontend
participant "JournalService" as JournalService
participant "NotificationService" as NotificationService
database "Database" as Database

' No title for consistency

' === Journal System ===
group Journaling System
    Patient -> Frontend: Create journal entry
    Frontend -> JournalService: Submit journal content (POST /api/mood/journal/)
    JournalService -> Database: Store journal entry
    alt Successful Journal Entry
        Database --> JournalService: Entry stored
        JournalService --> Frontend: Return success
        Frontend --> Patient: Display confirmation
    else Failed Journal Entry
        Database --> JournalService: Error storing entry
        JournalService --> Frontend: Return error response
        Frontend --> Patient: Display error message
    end
    
    Patient -> Frontend: Add metadata (mood, weather)
    Frontend -> JournalService: Submit entry metadata (PATCH /api/mood/journal/{id}/)
    JournalService -> Database: Update entry with metadata
    Database --> JournalService: Metadata stored
    JournalService --> Frontend: Return success
    Frontend --> Patient: Display updated entry
    
    Patient -> Frontend: Associate activities with entry
    Frontend -> JournalService: Submit activity associations (POST /api/mood/journal/{id}/activities/)
    JournalService -> Database: Link activities to entry
    Database --> JournalService: Activities linked
    JournalService --> Frontend: Return success
    Frontend --> Patient: Display updated journal entry
    
    Patient -> Frontend: Create journal category
    Frontend -> JournalService: Submit category (color, icon) (POST /api/mood/journal/categories/)
    JournalService -> Database: Store category
    Database --> JournalService: Category stored
    JournalService --> Frontend: Return success
    Frontend --> Patient: Display category created
    
    Patient -> Frontend: Categorize journal entry
    Frontend -> JournalService: Link entry to category (POST /api/mood/journal/{id}/categories/{cat_id}/)
    JournalService -> Database: Update entry categorization
    Database --> JournalService: Category linked
    JournalService -> NotificationService: Trigger journal update notification (POST /api/notifications/)
    NotificationService -> Database: Store notification
    Database --> NotificationService: Notification stored
    JournalService --> Frontend: Return success
    Frontend --> Patient: Display categorized entry
    
    Patient -> Frontend: View journal entries
    Frontend -> JournalService: Request journal history (GET /api/mood/journal/)
    JournalService -> Database: Fetch journal entries
    Database --> JournalService: Return journal data
    JournalService --> Frontend: Return journal entries
    Frontend --> Patient: Display journal entries
end

@enduml
